# chdir
```
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>

int main(void)
{
	int fd;
	char *p = "hello world\n"; /* 測試用的字串 */

	if(chdir("/home/admin/tmp") == -1){ /* 改變執行緒的工作目錄 */
		perror("fail to change dir");
		exit(1);
	}
	
	printf("change dir successfully\n"); /* 輸出提示資訊 */

	if((fd = open("test.txt", O_CREAT | O_RDWR)) == -1){ /* 建立一個檔案，該檔案建立在修改後的目錄 */
		perror("fail to open");
		exit(1);
	}

	if(write(fd, p, strlen(p)) == -1){ /* 向該檔案中輸出內容 */
		perror("fail to write");
		exit(1);
	}

	close(fd); /* 關閉檔案 */

	return 0;
}

```

# child_chdir
```
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX 1024

int main(void)
{
	pid_t pid;
	char buf[MAX];

	if(getcwd(buf, MAX) == NULL){ /* 得到修改後的工作目錄 */
		perror("fail to get pwd");
		exit(1);
	}

	printf("the parent』s pwd is : %s\n", buf);

	pid = fork(); /* 建立一個子執行緒 */

	if(pid == -1){
		perror("fail to fork");
		exit(1);
	}else if(pid == 0){
		printf("the child\n");

		if(chdir("/home/usr/") == -1){ /* 改變執行緒的工作目錄 */
			perror("fail to change dir");
			exit(1);
		}

		if(getcwd(buf, MAX) == NULL){ /* 得到子執行緒的工作目錄 */
			perror("fail to get pwd");
			exit(1);
		}

		printf("the child』s pwd is : %s\n", buf); /* 列印子執行緒修改後的工作目錄 */
	}else{
		if(wait(NULL) == -1){ /* 避免殭屍執行緒 */
			perror("fail to wait");
			exit(1);
		}

		if(getcwd(buf, MAX) == NULL){ /* 再次得到父執行緒的工作目錄 */
			perror("fail to get pwd");
			exit(1);
		}

		printf("the parent』s pwd is : %s\n", buf); /* 輸出提示資訊 */
	}

	return 0;
}

```

# file_count
```
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <errno.h>
#include <string.h>

#define MAX 1024

/* get_file_count函數的參數是一個路徑，表示目錄樹的根。
* 該函數傳回參數指定目錄下所用普通檔案的數目。
*/
int get_file_count(char *root)
{
	DIR * dir;
	struct dirent * ptr;
	int total = 0; /* 檔案總數 */
	char path[MAX];
	
	dir = opendir(root); /* 開啟目錄 */
	if(dir == NULL){
		perror("fail to open dir");
		exit(1);
	}

	errno = 0;
	while((ptr = readdir(dir)) != NULL){ /* 順序讀取每一個目錄項 */
		/* 跳過".."和"."兩個目錄 */
		if(strcmp(ptr->d_name,".") == 0 || strcmp(ptr->d_name,"..") == 0)
      		continue;
      	if(ptr->d_type == DT_DIR){ /* 如果是目錄，則遞歸呼叫get_file_count函數 */
      		sprintf(path, "%s/%s", root, ptr->d_name);
      		total += get_file_count(path);
      	}
      	if(ptr->d_type == DT_REG) /* 如果是普通檔案，則總數遞增 */
      		total++;	
	}

	if(errno != 0){ /* 如果errno是0，則說明目錄中目錄項已經全部讀完 */
		perror("fail to read dir");
		exit(1);
	}
	
	closedir(dir); /* 注意一定要關閉目錄 */

	return total; /* 傳回普通檔案數 */
}

int main(int argc, char * argv[])
{
	int total;
	
	if(argc != 2){ /* 指令行參數錯誤 */
		printf("wrong usage\n");
		exit(1);
	}

	total = get_file_count(argv[1]); /* 得到檔案數目 */

	printf("%s has %d files\n", argv[1], total);

	return 0;
}

```

# get_pwd
```
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX 1024

int main(void)
{
	pid_t pid;
	char buf[MAX];
	
	if(chdir("/home/admin/tmp") == -1){ /* 改變執行緒的工作目錄 */
		perror("fail to change dir");
		exit(1);
	}

	if(getcwd(buf, MAX) == NULL){ /* 得到修改後的工作目錄 */
		perror("fail to get pwd");
		exit(1);
	}

	printf("the parent : %s\n", buf); /* 列印修改後的工作目錄 */

	pid = fork(); /* 建立一個子執行緒 */

	if(pid == -1){
		perror("fail to fork");
		exit(1);
	}else if(pid == 0){
		if(getcwd(buf, MAX) == NULL){ /* 得到子執行緒的工作目錄 */
			perror("fail to get pwd");
			exit(1);
		}

		printf("the child : %s\n", buf);
	}else{
		if(wait(NULL) == -1){ /* 避免殭屍執行緒 */
			perror("fail to wait");
			exit(1);
		}
	}

	return 0;
}

```

# my_ls
```
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <errno.h>
#include <string.h>

#define MAX 1024

void my_ls(char *root)
{
	DIR * dir;
	struct dirent * ptr;
	int count;
	
	dir = opendir(root); /* 開啟目錄 */
	if(dir == NULL){
		perror("fail to open dir");
		exit(1);
	}

	errno = 0;
	while((ptr = readdir(dir)) != NULL){ /* 順序讀取每一個目錄項 */
		/* 跳過".."和"."兩個目錄 */
		if(strcmp(ptr->d_name,".") == 0 || strcmp(ptr->d_name,"..") == 0)
      		continue;
      	printf("%s\t", ptr->d_name); /* 列印每一個檔案的檔案名 */
		
		count++; /* 換行計數 */
		if(count %5 == 0)
			printf("\n");
	}
	
	if(errno != 0){ /* 如果errno是0，則說明目錄中目錄項已經全部讀完 */
		perror("fail to read dir");
		exit(1);
	}
	
	closedir(dir); /* 注意一定要關閉目錄 */
}

int main(int argc, char * argv[])
{
	if(argc != 2){
		printf("wrong usage\n");
		exit(1);
	}

	my_ls(argv[1]);

	return 0;
}

```

# rewind
```
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <unistd.h>

int main(void)
{
	DIR *dir;
	struct dirent * d_ptr;

	dir=opendir("/home/admin"); /* 開啟目錄 */
	if(dir == NULL){
		perror("fail to open dir");
		exit(1);
	}
	
	while((d_ptr = readdir(dir))!=NULL){ /* 順序輸出目錄中的每個檔案的檔案名 */
		printf("dir name is :%s \n",d_ptr->d_name);
	}

	printf("read again\n");
	rewinddir(dir); /* 目錄檔案的讀寫位置歸零 */
	
	while((d_ptr = readdir(dir))!=NULL){ /* 再次輸出每個檔案 */
		printf("dir name is :%s\n",d_ptr->d_name);
	}

	closedir(dir); /* 關閉目錄 */

	return 0;
}

```
